import:py from model, OpenAIModel, ClaudeModel;
import:py wikipedia;

model llm:ClaudeModel {
    model_name="claude-3-sonnet-20240229";
}

# model llm:OpenAIModel {
#     model_name="gpt-4";
# 

obj 'Question Answering'
QA {
    has qa_example: 'QA example with Thoughts and Actions': list[dict] = [
        {
            "Question": "What is the elevation range for the area that the eastern sector of the Colorado orogeny extends into?",
            "Thoughts and Observations": [
                {
                    "Thought": "I need to search Colorado orogeny, find the area that the eastern sector of the Colorado ...",
                    "Action": "Search 'Colorado orogeny'",
                    "Observation": "The Colorado orogeny was an episode of mountain building (an orogeny) ..."
                },
                {
                    "Thought": "It does not mention the eastern sector. So I need to look up eastern sector.",
                    "Action": "Search 'eastern sector of the Colorado orogeny'",
                    "Observation": "The eastern sector of the Colorado orogeny extends into the High Plains."
                },
                {
                    "Thought": "High Plains rise in elevation from around 1,800 to 7,000 ft, so the answer is 1,800 to 7,000 ft.",
                    "Action": "Finish '1,800 to 7,000 ft'"
                }
            ]
        }
    ];

    can 'Get next Thought and Action. Action should always startswith "Search" or "Finish"'
    get_throught_and_actions(question: 'Question': str, prev_info: 'Previous Thoughts, Actions, and Observations': list[dict] = []) -> 'Next Thought and Action': dict by llm(incl_info=(self.qa_example));

    can get_answer(question: str) -> str {
        got_answer = False;
        prev_info = [];
        while not got_answer and len(prev_info) < 100 {
            next_info = self.get_throught_and_actions(question, prev_info);
            if next_info["Action"].startswith("Search") {
                obs = wikipedia.summary(next_info["Action"].replace("Search ", "").replace("'", ""));
                next_info["Observation"] = obs;
            } elif next_info["Action"].startswith("Finish") {
                got_answer = True;
                return next_info["Action"].replace("Finish ", "").replace("'", "");
            }
            prev_info.append(next_info);
        }
        return "I am sorry, I could not find the answer.";
    }
}

with entry {
    qa = QA();
    question = "Where is Apple Headquaters located?";
    answer = qa.get_answer(question);
    print(f"Question: {question}\nAnswer: {answer}");

    question = "Who is Jason Mars?";
    answer = qa.get_answer(question);
    print(f"Question: {question}\nAnswer: {answer}");
}