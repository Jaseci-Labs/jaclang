import unittest
from _typeshed import Incomplete
from dataclasses import dataclass
from jaclang.compiler.constant import EdgeDir as EdgeDir
from jaclang.core.utils import collect_node_connections as collect_node_connections
from jaclang.plugin.spec import DSFunc as DSFunc
from typing import Callable, Optional
from uuid import UUID

@dataclass(eq=False)
class ElementAnchor:
    obj: Architype
    id: UUID = ...
    def __init__(self, obj, id) -> None: ...

@dataclass(eq=False)
class ObjectAnchor(ElementAnchor):
    def spawn_call(self, walk: WalkerArchitype) -> WalkerArchitype: ...
    def __init__(self, obj, id) -> None: ...

@dataclass(eq=False)
class NodeAnchor(ObjectAnchor):
    obj: NodeArchitype
    edges: list[EdgeArchitype] = ...
    edge_ids: list[UUID] = ...
    persistent: bool = ...
    def populate_edges(self) -> None: ...
    def connect_node(self, nd: NodeArchitype, edg: EdgeArchitype) -> NodeArchitype: ...
    def get_edges(self, dir: EdgeDir, filter_func: Optional[Callable[[list[EdgeArchitype]], list[EdgeArchitype]]], target_obj: Optional[list[NodeArchitype]]) -> list[EdgeArchitype]: ...
    def edges_to_nodes(self, dir: EdgeDir, filter_func: Optional[Callable[[list[EdgeArchitype]], list[EdgeArchitype]]], target_obj: Optional[list[NodeArchitype]]) -> list[NodeArchitype]: ...
    def gen_dot(self, dot_file: Optional[str] = None) -> str: ...
    def __init__(self, obj, id, edges, edge_ids, persistent) -> None: ...

@dataclass(eq=False)
class EdgeAnchor(ObjectAnchor):
    obj: EdgeArchitype
    source: Optional[NodeArchitype] = ...
    target: Optional[NodeArchitype] = ...
    source_id: Optional[UUID] = ...
    target_id: Optional[UUID] = ...
    is_undirected: bool = ...
    persistent: bool = ...
    def attach(self, src: NodeArchitype, trg: NodeArchitype, is_undirected: bool = False) -> EdgeAnchor: ...
    def detach(self, src: NodeArchitype, trg: NodeArchitype, is_undirected: bool = False) -> None: ...
    def spawn_call(self, walk: WalkerArchitype) -> WalkerArchitype: ...
    def __init__(self, obj, id, source, target, source_id, target_id, is_undirected, persistent) -> None: ...

@dataclass(eq=False)
class WalkerAnchor(ObjectAnchor):
    obj: WalkerArchitype
    path: list[Architype] = ...
    next: list[Architype] = ...
    ignores: list[Architype] = ...
    disengaged: bool = ...
    def visit_node(self, nds: list[NodeArchitype | EdgeArchitype] | NodeArchitype | EdgeArchitype) -> bool: ...
    def ignore_node(self, nds: list[NodeArchitype | EdgeArchitype] | NodeArchitype | EdgeArchitype) -> bool: ...
    def disengage_now(self) -> None: ...
    def spawn_call(self, nd: Architype) -> WalkerArchitype: ...
    def __init__(self, obj, id, path, next, ignores, disengaged) -> None: ...

class Architype:
    def __init__(self) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...

class NodeArchitype(Architype):
    def __init__(self) -> None: ...
    def save(self) -> None: ...

class EdgeArchitype(Architype):
    persistent: bool
    def __init__(self) -> None: ...
    def save(self) -> None: ...
    def populate_nodes(self) -> None: ...

class WalkerArchitype(Architype):
    def __init__(self) -> None: ...

class Root(NodeArchitype):
    reachable_nodes: list[NodeArchitype]
    connections: set[tuple[NodeArchitype, NodeArchitype, EdgeArchitype]]
    def __init__(self) -> None: ...
    def reset(self) -> None: ...

class GenericEdge(EdgeArchitype): ...

class JacTestResult(unittest.TextTestResult):
    failures_count: Incomplete
    max_failures: Incomplete
    def __init__(self, stream, descriptions, verbosity: int, max_failures: Optional[int] = None) -> None: ...
    def addFailure(self, test, err) -> None: ...
    shouldStop: bool
    def stop(self) -> None: ...

class JacTextTestRunner(unittest.TextTestRunner):
    max_failures: Incomplete
    def __init__(self, max_failures: Optional[int] = None, **kwargs) -> None: ...

class JacTestCheck:
    test_case: Incomplete
    test_suite: Incomplete
    breaker: bool
    failcount: int
    @staticmethod
    def reset() -> None: ...
    @staticmethod
    def run_test(xit: bool, maxfail: int | None, verbose: bool) -> None: ...
    @staticmethod
    def add_test(test_fun: Callable) -> None: ...
    def __getattr__(self, name: str) -> object: ...
