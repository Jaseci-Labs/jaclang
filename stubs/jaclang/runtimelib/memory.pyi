from .architype import (
    Anchor as Anchor,
    NodeAnchor as NodeAnchor,
    Root as Root,
    TANCH as TANCH,
)
from dataclasses import dataclass
from shelve import Shelf
from typing import Callable, Generator, Generic, Iterable, TypeVar
from uuid import UUID

ID = TypeVar("ID")

@dataclass
class Memory(Generic[ID, TANCH]):
    __mem__: dict[ID, TANCH] = ...
    __gc__: set[ID] = ...
    def close(self) -> None: ...
    def find(
        self, ids: ID | Iterable[ID], filter: Callable[[TANCH], TANCH] | None = None
    ) -> Generator[TANCH, None, None]: ...
    def find_one(
        self, ids: ID | Iterable[ID], filter: Callable[[TANCH], TANCH] | None = None
    ) -> TANCH | None: ...
    def find_by_id(self, id: ID) -> TANCH | None: ...
    def set(self, id: ID, data: TANCH) -> None: ...
    def remove(self, ids: ID | Iterable[ID]) -> None: ...
    def __init__(self, __mem__=..., __gc__=...) -> None: ...

@dataclass
class ShelfStorage(Memory[UUID, Anchor]):
    __shelf__: Shelf[Anchor] | None = ...
    def __init__(self, session: str | None = None) -> None: ...
    def close(self) -> None: ...
    def find(
        self,
        ids: UUID | Iterable[UUID],
        filter: Callable[[Anchor], Anchor] | None = None,
    ) -> Generator[Anchor, None, None]: ...
    def find_by_id(self, id: UUID) -> Anchor | None: ...
