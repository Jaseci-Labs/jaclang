from _typeshed import Incomplete
from dataclasses import dataclass
from jaclang.compiler.constant import EdgeDir as EdgeDir
from jaclang.runtimelib.utils import (
    collect_node_connections as collect_node_connections,
)
from types import UnionType
from typing import Any, Callable, Iterable, TypeVar
from uuid import UUID

TARCH = TypeVar("TARCH", bound="Architype")
TANCH = TypeVar("TANCH", bound="Anchor")

@dataclass
class Report:
    id: str
    context: dict[str, Any]
    def __init__(self, id, context) -> None: ...

@dataclass(eq=False)
class Anchor:
    architype: Architype
    id: UUID = ...
    persistent: bool = ...
    hash: int = ...
    def save(self) -> None: ...
    def destroy(self) -> None: ...
    def unlinked_architype(self) -> Architype | None: ...
    def report(self) -> Report: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __init__(self, architype, id=..., persistent=..., hash=...) -> None: ...

@dataclass(eq=False)
class NodeAnchor(Anchor):
    architype: NodeArchitype
    edges: list[EdgeAnchor] = ...
    edge_ids: list[UUID] = ...
    def populate_edges(self) -> None: ...
    def connect_node(self, node: NodeAnchor, edge: EdgeAnchor) -> None: ...
    def get_edges(
        self,
        dir: EdgeDir,
        filter_func: Callable[[list[EdgeArchitype]], list[EdgeArchitype]] | None,
        target_obj: list[NodeArchitype] | None,
    ) -> list[EdgeArchitype]: ...
    def edges_to_nodes(
        self,
        dir: EdgeDir,
        filter_func: Callable[[list[EdgeArchitype]], list[EdgeArchitype]] | None,
        target_obj: list[NodeArchitype] | None,
    ) -> list[NodeArchitype]: ...
    def remove_edge(self, edge: EdgeAnchor) -> None: ...
    def gen_dot(self, dot_file: str | None = None) -> str: ...
    def spawn_call(self, walk: WalkerAnchor) -> WalkerArchitype: ...
    def destroy(self) -> None: ...
    def __init__(
        self, architype, id=..., persistent=..., hash=..., edges=..., edge_ids=...
    ) -> None: ...

@dataclass(eq=False)
class EdgeAnchor(Anchor):
    architype: EdgeArchitype
    source: NodeAnchor | None = ...
    source_id: UUID | None = ...
    target: NodeAnchor | None = ...
    target_id: UUID | None = ...
    is_undirected: bool = ...
    def populate_nodes(self) -> None: ...
    def attach(
        self, src: NodeAnchor, trg: NodeAnchor, is_undirected: bool = False
    ) -> EdgeAnchor: ...
    def detach(self) -> None: ...
    def spawn_call(self, walk: WalkerAnchor) -> WalkerArchitype: ...
    def destroy(self) -> None: ...
    def __init__(
        self,
        architype,
        id=...,
        persistent=...,
        hash=...,
        source=...,
        source_id=...,
        target=...,
        target_id=...,
        is_undirected=...,
    ) -> None: ...

@dataclass(eq=False)
class WalkerAnchor(Anchor):
    architype: WalkerArchitype
    path: list[Anchor] = ...
    next: list[Anchor] = ...
    ignores: list[Anchor] = ...
    disengaged: bool = ...
    def visit_node(self, anchors: Iterable[NodeAnchor | EdgeAnchor]) -> bool: ...
    def ignore_node(self, anchors: Iterable[NodeAnchor | EdgeAnchor]) -> bool: ...
    def disengage_now(self) -> None: ...
    def spawn_call(self, node: Anchor) -> WalkerArchitype: ...
    def __init__(
        self,
        architype,
        id=...,
        persistent=...,
        hash=...,
        path=...,
        next=...,
        ignores=...,
        disengaged=...,
    ) -> None: ...

class Architype:
    __jac__: Incomplete
    def __init__(self) -> None: ...

class NodeArchitype(Architype):
    __jac__: NodeAnchor
    def __init__(self) -> None: ...

class EdgeArchitype(Architype):
    __jac__: EdgeAnchor
    def __init__(self) -> None: ...

class WalkerArchitype(Architype):
    __jac__: WalkerAnchor
    def __init__(self) -> None: ...

class GenericEdge(EdgeArchitype):
    __jac__: Incomplete
    def __init__(self) -> None: ...

class Root(NodeArchitype):
    __jac__: Incomplete
    def __init__(self) -> None: ...

@dataclass(eq=False)
class DSFunc:
    name: str
    trigger: type | UnionType | tuple[type | UnionType, ...] | None
    func: Callable[[Any, Any], Any] | None = ...
    def resolve(self, cls: type) -> None: ...
    def __init__(self, name, trigger, func=...) -> None: ...
